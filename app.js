// Generated by CoffeeScript 1.10.0
(function() {
  var YAML, checks, cli, errc, exec, fs, get, info, parse, path, pull, run, script, spawn, tub, warn;

  parse = require('./libs/yaml.js');

  fs = require('fs');

  path = require('path');

  get = require('./libs/get.js');

  checks = require('./libs/checks.js');

  parse = require('./libs/parse.js');

  spawn = require('child_process').spawn;

  exec = require('child_process').exec;

  script = require('./libs/gen.js').script;

  run = require('./libs/run.js');

  pull = require('./libs/pull.js');

  YAML = require('yamljs');

  cli = require('cli-color');

  'use strict';

  warn = cli.cyanBright('tub ') + cli.yellowBright('WARN: ');

  tub = cli.cyanBright('tub ');

  info = tub + cli.greenBright('info ');

  run = tub + cli.magentaBright('runner ');

  errc = cli.cyanBright('tub ') + cli.redBright('ERR: ');

  exports.start = function(args, dir) {
    var im;
    checks.instances(dir, true);
    this.parsed = parse.parse(dir + '/' + args + '/.web.yml');
    if (parsed.nodejs !== void 0 && process.env.WEB_DOCKER === false) {
      console.log(warn + 'Nodejs version ' + parsed.nodejs + ' is required. \nPlease consider using Docker');
    }
    if (parsed.ruby !== void 0 && process.env.WEB_DOCKER === false) {
      console.log(warn + 'Ruby version ' + parsed.ruby + ' is required. \nPlease consider using Docker');
    }
    if (parsed.python !== void 0 && process.env.WEB_DOCKER === false) {
      console.log(warn + 'Python version ' + parsed.python + ' is required. \nPlease consider using Docker');
      if (parsed.python === 3) {
        console.log(warn + 'You are using Python 3. All python cmd commands must be ran using "python3"');
      }
    }
    if (parsed.language === 'python') {
      if (parsed.python === void 0) {
        console.log(errc + 'Please specify a python version as python 2 and 3 are different');
        process.exit(1);
      }
    }
    if (parsed.nodejs === 'latest') {
      console.log(warn + 'latest is not a nodejs version. For the latest version, use "stable" instead. We wil swap "latest" for "stable" this time');
    }
    if (process.env.WEB_DOCKER !== false) {
      console.log('\n' + info + 'Pulling Docker images...');
      this.images = parse.parse('config/images.yml');
      this.dateo = new Date().getDate();
      if (images.date !== this.dateo) {
        im = 0;
        while (im < images.images.length) {
          exec('docker pull ' + images.images[im]);
          im++;
        }
        images.date = this.dateo;
        this.write = YAML.stringify(this.images, 4);
        fs.writeFileSync('config/images.yml', this.write);
      } else {
        console.log(info + 'Already pulled images');
      }
    }
    console.log('\n' + run + 'Starting Web-app ' + parsed.name);
    console.log(info + 'Language: ' + parsed.language);
    if (process.env.WEB_DOCKER !== false) {
      script(parsed.language, parsed, null, dir + '/' + args);
    }
    return 'Done';
  };

  exports.pullImages = function(dir) {
    return pull.pullImages(dir);
  };

  exports.run = function(image, args) {
    return run.run(image, args);
  };

}).call(this);
